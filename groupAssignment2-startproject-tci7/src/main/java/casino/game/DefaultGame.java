package casino.game;


import casino.bet.Bet;
import casino.bet.BetResult;
import casino.gamingmachine.IGamingMachine;
import casino.gamingmachine.NoPlayerCardException;
import casino.idfactory.BettingRoundID;
import casino.idfactory.IDFactory;
import gamblingauthoritiy.BetLoggingAuthority;
import gamblingauthoritiy.BetToken;
import gamblingauthoritiy.BetTokenAuthority;

import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

public class DefaultGame extends AbstractGame {
    private Set<BettingRound> bettingRoundSet;
    private final BetTokenAuthority betTokenAuthority;
    private final BetLoggingAuthority betLoggingAuthority;
    private BettingRoundID newBettingRoundId;
    private BettingRound currentBettingRound;
    private Set<IGamingMachine> gamingMachines;
    private GameRules gameRules;

    public DefaultGame(BetTokenAuthority betTokenAuthority, BetLoggingAuthority betLoggingAuthority){
        super(betTokenAuthority, betLoggingAuthority);
        this.bettingRoundSet = new HashSet<>();
        this.betTokenAuthority = betTokenAuthority;
        this.betLoggingAuthority = betLoggingAuthority;
        this.gamingMachines = new HashSet<>();
        this.gameRules = new GameRules();
    }

    public BettingRoundID getNewBettingRoundId() {
        return newBettingRoundId;
    }

    public Set<BettingRound> getBettingRoundSet() {
        return bettingRoundSet;
    }

    public BettingRound getCurrentBettingRound() {
        return currentBettingRound;
    }

    public GameRules getGameRules() {
        return gameRules;
    }

    /**
     *
     * @return
     * @should  Get BetToken From BetToken Authority
     * @should create a betting round and add it to the list
     * @should start logging the betting round
     */
    @Override
    public void startBettingRound() {
        // Get BetToken From BetToken Authority
        newBettingRoundId = (BettingRoundID) IDFactory.generateID("BETTINGROUND");
        BetToken betTokenForNewRound = this.betTokenAuthority.getBetToken(newBettingRoundId);

        //create a betting round and add it to the list
        currentBettingRound = new BettingRound();
        this.bettingRoundSet.add(currentBettingRound);

        //start logging the betting round
        this.betLoggingAuthority.logStartBettingRound(currentBettingRound);
    }

    /**
     *
     * @param bet the bet to be made on the betting round
     * @param gamingMachine gamingmachine which places bet on this game.
     * @return
     * @throws NoCurrentRoundException
     * @should throw NoCurrentRoundExceptionIfRoundIsFinished
     * @should place the bet in betting round
     */
    @Override
    public boolean acceptBet(Bet bet, IGamingMachine gamingMachine) throws NoCurrentRoundException {
        //throw NoCurrentRoundExceptionIfRoundIsFinished
        if(this.isBettingRoundFinished(this.getCurrentBettingRound(), gameRules)) {
            throw new NoCurrentRoundException();
        }

        this.getCurrentBettingRound().placeBet(bet);
        //this.currentBettingRound.equals(currentBettingRound);

        if(this.isBettingRoundFinished(this.getCurrentBettingRound(), gameRules)) {
            this.determineWinner(this.getCurrentBettingRound(), gameRules);
        }

        return true;
    }

    /**
     * 1) Determine winner by calling determineWinner() method of GameRule with random number
     * generated by getRandomInteger method of BetTokenAuthority as parameter.
     * 2) This determineWinner() method also ends the BettingRound.
     * 3) All Bets are logged using logAddAcceptedBet() method of BetLoggingAuthority
     * and logEndBettingRound() also from BetLoggingAuthority is called.
     * 4) Also, GamingMachines are notified when the round ends using acceptMethod() of GamingMachine.
     * 5) Should start a new round
     * @should determine a winner when the method of game rule is called
     * @should end the betting round
     * @should send bets for logging
     * @should send notifications to all gaming machines
     * @should start a new round
     */
    @Override
    public void determineWinner(BettingRound currentBettingRound, GameRules gameRules) {
        BetResult betResult = null;
        try {
            betResult = gameRules.determineWinner(this.betTokenAuthority.getRandomInteger(currentBettingRound.getBetToken()),
                    currentBettingRound.getAllBetsMade());
        }
        catch (NoBetsMadeException e) {
            e.printStackTrace();
        }

        this.betLoggingAuthority.logEndBettingRound(currentBettingRound, betResult);


    }

    /**
     * If the maximum number of Bets, which is received from getMaxBetsPerRound() method in GameRule,
     * has been reached 'true' is returned, indicating a winner can already be calculated. Otherwise 'false' is returned.
     * @return
     * @should indicate if a round is finished
     */
    @Override
    public boolean isBettingRoundFinished(BettingRound currentBettingRound, GameRules gameRules) {
        if(currentBettingRound.numberOFBetsMade() == (gameRules.getMaxBetsPerRound())){
            return true;
        }
        return false;
    }
}
