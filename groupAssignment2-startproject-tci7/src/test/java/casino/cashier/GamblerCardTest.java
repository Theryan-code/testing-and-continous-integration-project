package casino.cashier;

import casino.idfactory.BetID;
import casino.idfactory.CardID;
import casino.idfactory.IDFactory;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import junitparams.JUnitParamsRunner;
import junitparams.Parameters;


import java.util.Arrays;
import java.util.HashSet;

import static org.assertj.core.api.Assertions.*;
import static org.mockito.Mockito.mock;

@RunWith(JUnitParamsRunner.class)
public class GamblerCardTest {

    private static BetID id1 = mock(BetID.class);
    private static BetID id2 = mock(BetID.class);
    private static BetID id3 = mock(BetID.class);

    private static Object[] sampleBetIDs(){
        return new Object[]{
                new Object[]{
                        new HashSet<>(Arrays.asList(id1, id2, id3))
                }
        };
    }
    /**
     * @verifies return all bet Ids generated by the card
     * @see GamblerCard#returnBetIDs()
     */
    @Test
    @Parameters(method = "sampleBetIDs")
    public void returnBetIDs_shouldReturnAllBetIdsGeneratedByTheCard(HashSet<BetID> betIDS){
        //arrange
        GamblerCard testGamblerCard = new GamblerCard();

        //act
        testGamblerCard.getBetIDSInCard().add(id1);
        testGamblerCard.getBetIDSInCard().add(id2);
        testGamblerCard.getBetIDSInCard().add(id3);

        //assert
        assertThat(testGamblerCard.returnBetIDs()).isEqualTo(betIDS);
    }

    /**
     * @verifies clear all generated Ids by the card after returning them
     * @see GamblerCard#returnBetIDsAndClearCard()
     */
    @Test
    @Parameters(method = "sampleBetIDs")
    public void returnBetIDsAndClearCard_shouldClearAllGeneratedIdsByTheCardAfterReturningThem(HashSet<BetID> betIDS) {
        //arrange
        GamblerCard testGamblerCard = new GamblerCard();

        //act
        testGamblerCard.getBetIDSInCard().add(id1);
        testGamblerCard.getBetIDSInCard().add(id2);
        testGamblerCard.getBetIDSInCard().add(id3);

        //assert
        assertThat(testGamblerCard.returnBetIDsAndClearCard()).isEqualTo(betIDS);
        assertThat(testGamblerCard.getBetIDSInCard().size()).isEqualTo(0);
    }

    /**
     * @verifies return an int indicating the number of Ids stored on the card
     * @see GamblerCard#getNumberOfBetIDs()
     */
    @Test
    @Parameters(method = "sampleBetIDs")
    public void getNumberOfBetIDs_shouldReturnAnIntIndicatingTheNumberOfIdsStoredOnTheCard(HashSet<BetID> betIDS) {
        //arrange
        GamblerCard testGamblerCard = new GamblerCard();

        //act
        testGamblerCard.getBetIDSInCard().add(id1);
        testGamblerCard.getBetIDSInCard().add(id2);
        testGamblerCard.getBetIDSInCard().add(id3);

        //assert
        assertThat(testGamblerCard.getNumberOfBetIDs()).isEqualTo(3);

    }

    /**
     * @verifies return the Id of the card
     * @see GamblerCard#getCardID()
     */
    @Test
    public void getCardID_shouldReturnTheIdOfTheCard() throws Exception {
        //arrange
        GamblerCard testGamblerCard = new GamblerCard();

        //assert
        assertThat(testGamblerCard.getCardID()).isNotNull();
    }

    /**
     * @verifies generate a betID and add it to the list of betIds
     * @see GamblerCard#generateNewBetID()
     */
    @Test
    public void generateNewBetID_shouldGenerateABetIDAndAddItToTheListOfBetIds() throws Exception {
        //arrange
        GamblerCard testGamblerCard = new GamblerCard();

        //assert
        assertThat(testGamblerCard.generateNewBetID()).isNotNull();
        assertThat(testGamblerCard.getNumberOfBetIDs()).isEqualTo(1);
    }
}
